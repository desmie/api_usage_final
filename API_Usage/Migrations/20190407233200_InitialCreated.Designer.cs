// <auto-generated />
using API_Usage.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace API_Usage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190407233200_InitialCreated")]
    partial class InitialCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API_Usage.Models.Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API_Usage.Models.Dividend_Model", b =>
                {
                    b.Property<string>("exdate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("declaredDate");

                    b.Property<string>("paymentDate");

                    b.Property<string>("qualified");

                    b.Property<string>("recordDate");

                    b.Property<string>("type");

                    b.HasKey("exdate");

                    b.ToTable("Dividend");
                });

            modelBuilder.Entity("API_Usage.Models.Equity", b =>
                {
                    b.Property<int>("EquityId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("change");

                    b.Property<float>("changeOverTime");

                    b.Property<float>("changePercent");

                    b.Property<float>("close");

                    b.Property<string>("date");

                    b.Property<float>("high");

                    b.Property<string>("label");

                    b.Property<float>("low");

                    b.Property<float>("open");

                    b.Property<string>("symbol");

                    b.Property<int>("unadjustedVolume");

                    b.Property<int>("volume");

                    b.Property<float>("vwap");

                    b.HasKey("EquityId");

                    b.HasIndex("symbol");

                    b.ToTable("Equities");
                });

            modelBuilder.Entity("API_Usage.Models.Gainers_Model", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<float>("change");

                    b.Property<float>("changePercent");

                    b.Property<float>("close");

                    b.Property<long>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<float>("delayedPrice");

                    b.Property<long>("delayedPriceTime");

                    b.Property<float>("extendedChange");

                    b.Property<float>("extendedChangePercent");

                    b.Property<float>("extendedPrice");

                    b.Property<long>("extendedPriceTime");

                    b.Property<float>("high");

                    b.Property<float>("iexAskPrice");

                    b.Property<float>("iexAskSize");

                    b.Property<float>("iexBidPrice");

                    b.Property<float>("iexBidSize");

                    b.Property<string>("iexLastUpdated");

                    b.Property<float>("iexMarketPercent");

                    b.Property<float>("iexRealtimePrice");

                    b.Property<float>("iexRealtimeSize");

                    b.Property<float>("iexVolume");

                    b.Property<float>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<long>("latestUpdate");

                    b.Property<int>("latestVolume");

                    b.Property<float>("low");

                    b.Property<long>("marketCap");

                    b.Property<float>("open");

                    b.Property<long>("openTime");

                    b.Property<float>("peRatio");

                    b.Property<float>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<float>("week52High");

                    b.Property<float>("week52Low");

                    b.Property<float>("ytdChange");

                    b.HasKey("symbol");

                    b.ToTable("Gainers");
                });

            modelBuilder.Entity("API_Usage.Models.Historical_Summary", b =>
                {
                    b.Property<int>("uniqueSymbolsTraded")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("averageDailyRoutedVolume");

                    b.Property<float>("averageDailyVolume");

                    b.Property<int>("averageFillSize");

                    b.Property<int>("averageMarketShare");

                    b.Property<int>("averageOrderSize");

                    b.Property<float>("bin10000Percent");

                    b.Property<int>("bin10000Trades");

                    b.Property<float>("bin1000Percent");

                    b.Property<float>("bin100Percent");

                    b.Property<float>("bin101Percent");

                    b.Property<int>("bin20000Trades");

                    b.Property<float>("bin200Percent");

                    b.Property<float>("bin300Percent");

                    b.Property<float>("bin400Percent");

                    b.Property<int>("bin50000Trades");

                    b.Property<float>("bin5000Percent");

                    b.Property<float>("bin500Percent");

                    b.Property<float>("blockPercent");

                    b.Property<float>("etfPercent");

                    b.Property<float>("largeCapPercent");

                    b.Property<float>("midCapPercent");

                    b.Property<float>("selfCrossPercent");

                    b.Property<float>("smallCapPercent");

                    b.Property<float>("venueARCXFirstWaveRate");

                    b.Property<float>("venueARCXFirstWaveWeight");

                    b.Property<float>("venueBATSFirstWaveRate");

                    b.Property<float>("venueBATSFirstWaveWeight");

                    b.Property<float>("venueBATYFirstWaveRate");

                    b.Property<float>("venueBATYFirstWaveWeight");

                    b.Property<float>("venueEDGAFirstWaveRate");

                    b.Property<float>("venueEDGAFirstWaveWeight");

                    b.Property<float>("venueEDGXFirstWaveRate");

                    b.Property<float>("venueEDGXFirstWaveWeight");

                    b.Property<float>("venueOverallFirstWaveRate");

                    b.Property<int>("venueOverallFirstWaveWeight");

                    b.Property<float>("venueXASEFirstWaveRate");

                    b.Property<float>("venueXASEFirstWaveWeight");

                    b.Property<float>("venueXBOSFirstWaveRate");

                    b.Property<float>("venueXBOSFirstWaveWeight");

                    b.Property<float>("venueXCHIFirstWaveRate");

                    b.Property<float>("venueXCHIFirstWaveWeight");

                    b.Property<float>("venueXCISFirstWaveRate");

                    b.Property<float>("venueXCISFirstWaveWeight");

                    b.Property<float>("venueXNGSFirstWaveRate");

                    b.Property<float>("venueXNGSFirstWaveWeight");

                    b.Property<float>("venueXNYSFirstWaveRate");

                    b.Property<float>("venueXNYSFirstWaveWeight");

                    b.Property<float>("venueXPHLFirstWaveRate");

                    b.Property<float>("venueXPHLFirstWaveWeight");

                    b.HasKey("uniqueSymbolsTraded");

                    b.ToTable("History");
                });

            modelBuilder.Entity("API_Usage.Models.Infocus_Model", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<double>("change");

                    b.Property<double>("changePercent");

                    b.Property<float>("close");

                    b.Property<long>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<double>("delayedPrice");

                    b.Property<long>("delayedPriceTime");

                    b.Property<double>("extendedChange");

                    b.Property<double>("extendedChangePercent");

                    b.Property<long>("extendedPrice");

                    b.Property<long>("extendedPriceTime");

                    b.Property<float>("high");

                    b.Property<string>("iexAskPrice");

                    b.Property<string>("iexAskSize");

                    b.Property<string>("iexBidPrice");

                    b.Property<string>("iexBidSize");

                    b.Property<string>("iexLastUpdated");

                    b.Property<string>("iexMarketPercent");

                    b.Property<string>("iexRealtimePrice");

                    b.Property<string>("iexRealtimeSize");

                    b.Property<string>("iexVolume");

                    b.Property<double>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<long>("latestUpdate");

                    b.Property<int>("latestVolume");

                    b.Property<double>("low");

                    b.Property<long>("marketCap");

                    b.Property<string>("open");

                    b.Property<long>("openTime");

                    b.Property<string>("peRatio");

                    b.Property<double>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<float>("week52High");

                    b.Property<float>("week52Low");

                    b.Property<double>("ytdChange");

                    b.HasKey("symbol");

                    b.ToTable("InFocus");
                });

            modelBuilder.Entity("API_Usage.Models.News_Model", b =>
                {
                    b.Property<DateTime>("datetime");

                    b.Property<string>("headline");

                    b.Property<string>("image");

                    b.Property<string>("related");

                    b.Property<string>("source");

                    b.Property<string>("summary");

                    b.Property<string>("url");

                    b.HasKey("datetime");

                    b.ToTable("News");
                });

            modelBuilder.Entity("API_Usage.Models.SectorPerformance_Model", b =>
                {
                    b.Property<string>("name")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("lastUpdated");

                    b.Property<float>("performance");

                    b.Property<string>("type");

                    b.HasKey("name");

                    b.ToTable("SectorPerform");
                });

            modelBuilder.Entity("API_Usage.Models.Equity", b =>
                {
                    b.HasOne("API_Usage.Models.Company")
                        .WithMany("Equities")
                        .HasForeignKey("symbol");
                });
#pragma warning restore 612, 618
        }
    }
}
